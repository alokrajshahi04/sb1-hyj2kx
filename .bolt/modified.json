[["/home/project/src/components/AuthModal.tsx","import React, { useState } from 'react';\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, signInWithPopup, signInWithRedirect, GoogleAuthProvider } from 'firebase/auth';\nimport { auth } from '../firebase';\nimport { X } from 'lucide-react';\n\n// ... (previous code remains the same)\n\nconst AuthModal: React.FC<AuthModalProps> = ({ isOpen, onClose, isSignUp }) => {\n  // ... (previous state and handlers remain the same)\n\n  const handleGoogleSignIn = async () => {\n    try {\n      const provider = new GoogleAuthProvider();\n      await signInWithPopup(auth, provider);\n      onClose();\n    } catch (error: any) {\n      console.error('Google sign-in error:', error);\n      if (error.code === 'auth/popup-blocked') {\n        setError('Popup was blocked. Trying redirect method...');\n        try {\n          await signInWithRedirect(auth, provider);\n          // The page will reload after redirect, so no need to call onClose()\n        } catch (redirectError) {\n          console.error('Google redirect sign-in error:', redirectError);\n          setError('Google sign-in failed. Please try again or use email/password.');\n        }\n      } else {\n        setError('Google sign-in failed. Please try again or use email/password.');\n      }\n    }\n  };\n\n  // ... (rest of the component remains the same)\n\n  return (\n    // ... (previous JSX)\n    <div className=\"mt-4\">\n      <button onClick={handleGoogleSignIn} className=\"w-full bg-red-600 text-white py-2 px-4 rounded-md hover:bg-red-700 transition duration-300\">\n        Sign in with Google\n      </button>\n      <p className=\"text-xs text-gray-500 mt-2\">\n        Note: You may need to allow popups for this site to use Google Sign-In.\n      </p>\n    </div>\n    // ... (rest of the JSX)\n  );\n};\n\nexport default AuthModal;"]]